{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/FragmentShader.vue?af21","webpack:///./demo/App.vue?c518","webpack:///./src/FragmentShader.vue?fa6f","webpack:///./src/FragmentShader.vue?4466","webpack:///./demo/App.vue?b0c8","webpack:///./src/FragmentShader.vue?c5fc","webpack:///./src/libs/snoise.js","webpack:///./src/libs/rotate2d.js","webpack:///./src/gl/init.js","webpack:///./src/libs/defaultShaders.js","webpack:///./src/gl/buildShaders.js","webpack:///./src/gl-matrix/common.js","webpack:///./src/gl-matrix/mat4.js","webpack:///./src/gl/buildPlane.js","webpack:///src/FragmentShader.vue","webpack:///./src/FragmentShader.vue?341f","webpack:///./src/FragmentShader.vue","webpack:///demo/App.vue","webpack:///./demo/App.vue?414b","webpack:///./demo/App.vue","webpack:///./demo/main.js","webpack:///./demo/App.vue?09a3","webpack:///./demo/App.vue?cdd6"],"names":["i","chunkIds","length","deferredModules","j","deferredModule","enumerable","get","getter","value","key","bind","module","Object","prototype","hasOwnProperty","call","object","property","jsonpArray","webpackJsonpCallback","exports","push","content","locals","add","default","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","_v","staticRenderFns","_t","ref","on","initializeCanvas","gl","canvas","getContext","clearColor","clear","COLOR_BUFFER_BIT","console","warn","vertexShader","loadShader","VERTEX_SHADER","vsSource","fragmentShader","FRAGMENT_SHADER","fsSource","shaderProgram","createProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","getProgramInfoLog","type","source","shader","createShader","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","deleteShader","ARRAY_TYPE","Float32Array","Array","Math","random","PI","create","out","translate","a","v","a00","a01","a02","a03","a10","a11","a12","a13","a20","a21","a22","a23","x","y","z","perspective","fovy","aspect","near","far","nf","f","tan","Infinity","hypot","arguments","sqrt","buffers","initBuffers","clearDepth","enable","DEPTH_TEST","depthFunc","LEQUAL","DEPTH_BUFFER_BIT","fieldOfView","clientWidth","clientHeight","zNear","zFar","projectionMatrix","modelViewMatrix","numComponents","FLOAT","normalize","stride","offset","bindBuffer","ARRAY_BUFFER","position","vertexAttribPointer","programInfo","attribLocations","vertexPosition","enableVertexAttribArray","useProgram","program","uniformMatrix4fv","uniformLocations","vertexCount","drawArrays","TRIANGLE_STRIP","positionBuffer","createBuffer","positions","bufferData","STATIC_DRAW","components","props","uniforms","builtUniforms","lastTime","Date","now","time","methods","init","fragmentVNode","$slots","find","h","fragment","replace","snoise","rotate2d","vertexVNode","vertex","buildShaders","toBuild","uTime","uResolution","width","height","keys","map","uni","uniformValueSetFunction","uniformMap","getUniformLocation","buildPlane","requestAnimationFrame","computed","float","loc","val","uniform1f","vec2","uniform2fv","vec3","uniform3fv","vec4","uniform4fv","mat2","uniformMatrix2fv","mat3","uniformMatrix3fv","mat4","getAttribLocation","component","FragmentShader","config","productionTip","App","$mount"],"mappings":"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","file":"js/app.c8bf81b8.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t\"app\": 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/fragment-shader/\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([\"a1ec\",\"chunk-vendors\"]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".fragment-shader,.fragment-shader .canvas{position:absolute;top:0;left:0;width:100%;height:100%}\", \"\"]);\n\n// exports\n","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"1f36de2f\", content, true, {\"sourceMap\":false,\"shadowMode\":false});","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FragmentShader.vue?vue&type=style&index=0&lang=css&\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = require(\"!../node_modules/vue-style-loader/lib/addStylesClient.js\").default\nvar update = add(\"0cc0ffa0\", content, true, {\"sourceMap\":false,\"shadowMode\":false});","import mod from \"-!../node_modules/vue-style-loader/index.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FragmentShader.vue?vue&type=style&index=0&lang=css&\"; export default mod; export * from \"-!../node_modules/vue-style-loader/index.js??ref--6-oneOf-1-0!../node_modules/css-loader/index.js??ref--6-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FragmentShader.vue?vue&type=style&index=0&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('main',{staticClass:\"class\"},[_c('div',{staticClass:\"single-shader\"},[_c('fragment-shader',[_c('script',{attrs:{\"type\":\"shader/fragment\"}},[_vm._v(\"\\n                precision highp float;\\n                uniform vec2 uResolution;\\n\\n                void main() {\\n                    vec2 uv = gl_FragCoord.xy / uResolution.xy;\\n                    gl_FragColor = vec4(uv.x, 0.2, 0.2, 1.);\\n                }\\n            \")])])],1),_c('div',{staticClass:\"single-shader\"},[_c('fragment-shader',[_c('script',{attrs:{\"type\":\"shader/fragment\"}},[_vm._v(\"\\n                precision highp float;\\n                uniform vec2 uResolution;\\n                uniform float uTime;\\n\\n                #include <snoise>\\n\\n                void main() {\\n                    vec2 uv = gl_FragCoord.xy / uResolution.xy;\\n                    uv.x *= uResolution.x / uResolution.y;\\n                    vec4 color = vec4(vec3(1. - abs(snoise(uv + uTime * 0.0002))), 1.);\\n                    gl_FragColor = color;\\n                }\\n            \")])])],1),_c('div',{staticClass:\"single-shader\"},[_c('fragment-shader',[_c('script',{attrs:{\"type\":\"shader/fragment\"}},[_vm._v(\"\\n                precision highp float;\\n                uniform vec2 uResolution;\\n                uniform float uTime;\\n\\n                #include <snoise>\\n                #include <rotate2d>\\n\\n                void main() {\\n                    vec2 uv = gl_FragCoord.xy / uResolution.xy;\\n                    uv -= vec2(0.5);\\n                    uv *= rotate2d(uTime * 0.00025);\\n                    uv += vec2(0.5);\\n\\n                    vec4 color = vec4(vec3(1. - abs(snoise(uv))), 1.);\\n                    gl_FragColor = color;\\n                }\\n            \")])])],1)])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"fragment-shader\"},[_vm._t(\"default\"),_c('full-canvas',{ref:\"canvas\",staticClass:\"canvas\",on:{\"canvas-ready\":_vm.initializeCanvas}})],2)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export default `//\n// Description : Array and textureless GLSL 2D simplex noise function.\n//      Author : Ian McEwan, Ashima Arts.\n//  Maintainer : stegu\n//     Lastmod : 20110822 (ijm)\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\n//               Distributed under the MIT License. See LICENSE file.\n//               https://github.com/ashima/webgl-noise\n//               https://github.com/stegu/webgl-noise\n//\n\nvec3 mod289(vec3 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec2 mod289(vec2 x) {\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\n}\n\nvec3 permute(vec3 x) {\n  return mod289(((x*34.0)+1.0)*x);\n}\n\nfloat snoise(vec2 v)\n  {\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\n                      0.024390243902439); // 1.0 / 41.0\n// First corner\n  vec2 i  = floor(v + dot(v, C.yy) );\n  vec2 x0 = v -   i + dot(i, C.xx);\n\n// Other corners\n  vec2 i1;\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\n  //i1.y = 1.0 - i1.x;\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\n  // x1 = x0 - i1 + 1.0 * C.xx ;\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n\n// Permutations\n  i = mod289(i); // Avoid truncation effects in permutation\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n\t\t+ i.x + vec3(0.0, i1.x, 1.0 ));\n\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n  m = m*m ;\n  m = m*m ;\n\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n\n// Normalise gradients implicitly by scaling m\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n\n// Compute final noise value at P\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}`\n","export default `mat2 rotate2d(float _angle){\n    return mat2(cos(_angle),-sin(_angle),\n                sin(_angle),cos(_angle));\n}`\n","// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Getting_started_with_WebGL\nexport default function(canvas) {\n    const gl = canvas.getContext('webgl')\n\n    // Only continue if WebGL is available and working\n    if (gl === null) {\n        console.warn(\n            'Unable to initialize WebGL. Your browser or machine may not support it.'\n        )\n        return\n    }\n\n    // Set clear color to black, fully opaque\n    gl.clearColor(0.0, 0.0, 0.0, 1.0)\n    // Clear the color buffer with specified clear color\n    gl.clear(gl.COLOR_BUFFER_BIT)\n\n    return { gl }\n}\n","// Vertex shader program\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\nexport const vertex = `\nattribute vec4 aVertexPosition;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\n\nvoid main() {\n  gl_Position = uProjectionMatrix * uModelViewMatrix * aVertexPosition;\n}\n`\n\nexport const fragment = `\nvoid main() {\n  gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n}\n`\n","// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\n\n//\n// Initialize a shader program, so WebGL knows how to draw our data\n//\nexport default function(gl, vsSource, fsSource) {\n    const vertexShader = loadShader(gl, gl.VERTEX_SHADER, vsSource)\n    const fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fsSource)\n\n    // Create the shader program\n\n    const shaderProgram = gl.createProgram()\n    gl.attachShader(shaderProgram, vertexShader)\n    gl.attachShader(shaderProgram, fragmentShader)\n    gl.linkProgram(shaderProgram)\n\n    // If creating the shader program failed, alert\n\n    if (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n        console.warn(\n            'Unable to initialize the shader program: ' +\n                gl.getProgramInfoLog(shaderProgram)\n        )\n        return null\n    }\n\n    return shaderProgram\n}\n\n//\n// creates a shader of the given type, uploads the source and\n// compiles it.\n//\nfunction loadShader(gl, type, source) {\n    const shader = gl.createShader(type)\n\n    // Send the source to the shader object\n\n    gl.shaderSource(shader, source)\n\n    // Compile the shader program\n\n    gl.compileShader(shader)\n\n    // See if it compiled successfully\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n        console.warn(\n            'An error occurred compiling the shaders: ' +\n                gl.getShaderInfoLog(shader)\n        )\n        gl.deleteShader(shader)\n        return null\n    }\n\n    return shader\n}\n","/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nexport const EPSILON = 0.000001;\nexport let ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nexport const RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Float32ArrayConstructor | ArrayConstructor} type Array type, such as Float32Array or Array\n */\nexport function setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nconst degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nexport function toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nexport function equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\nif (!Math.hypot) Math.hypot = function() {\n  var y = 0, i = arguments.length;\n  while (i--) y += arguments[i] * arguments[i];\n  return Math.sqrt(y);\n};\n","import * as glMatrix from \"./common.js\";\n\n/**\n * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nexport function create() {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  if (glMatrix.ARRAY_TYPE != Float32Array) {\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = 0;\n    out[6] = 0;\n    out[7] = 0;\n    out[8] = 0;\n    out[9] = 0;\n    out[11] = 0;\n    out[12] = 0;\n    out[13] = 0;\n    out[14] = 0;\n  }\n  out[0] = 1;\n  out[5] = 1;\n  out[10] = 1;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {ReadonlyMat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nexport function clone(a) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nexport function fromValues(\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  let out = new glMatrix.ARRAY_TYPE(16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nexport function set(\n  out,\n  m00,\n  m01,\n  m02,\n  m03,\n  m10,\n  m11,\n  m12,\n  m13,\n  m20,\n  m21,\n  m22,\n  m23,\n  m30,\n  m31,\n  m32,\n  m33\n) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nexport function identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    let a01 = a[1],\n      a02 = a[2],\n      a03 = a[3];\n    let a12 = a[6],\n      a13 = a[7];\n    let a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function invert(out, a) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  let a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  let a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  let a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  let det =\n    b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the source matrix\n * @returns {mat4} out\n */\nexport function adjoint(out, a) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  let a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  let a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  let a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  let b00 = a00 * a11 - a01 * a10;\n  let b01 = a00 * a12 - a02 * a10;\n  let b02 = a00 * a13 - a03 * a10;\n  let b03 = a01 * a12 - a02 * a11;\n  let b04 = a01 * a13 - a03 * a11;\n  let b05 = a02 * a13 - a03 * a12;\n  let b06 = a20 * a31 - a21 * a30;\n  let b07 = a20 * a32 - a22 * a30;\n  let b08 = a20 * a33 - a23 * a30;\n  let b09 = a21 * a32 - a22 * a31;\n  let b10 = a21 * a33 - a23 * a31;\n  let b11 = a22 * a33 - a23 * a32;\n\n  out[0] = a11 * b11 - a12 * b10 + a13 * b09;\n  out[1] = a02 * b10 - a01 * b11 - a03 * b09;\n  out[2] = a31 * b05 - a32 * b04 + a33 * b03;\n  out[3] = a22 * b04 - a21 * b05 - a23 * b03;\n  out[4] = a12 * b08 - a10 * b11 - a13 * b07;\n  out[5] = a00 * b11 - a02 * b08 + a03 * b07;\n  out[6] = a32 * b02 - a30 * b05 - a33 * b01;\n  out[7] = a20 * b05 - a22 * b02 + a23 * b01;\n  out[8] = a10 * b10 - a11 * b08 + a13 * b06;\n  out[9] = a01 * b08 - a00 * b10 - a03 * b06;\n  out[10] = a30 * b04 - a31 * b02 + a33 * b00;\n  out[11] = a21 * b02 - a20 * b04 - a23 * b00;\n  out[12] = a11 * b07 - a10 * b09 - a12 * b06;\n  out[13] = a00 * b09 - a01 * b07 + a02 * b06;\n  out[14] = a31 * b01 - a30 * b03 - a32 * b00;\n  out[15] = a20 * b03 - a21 * b01 + a22 * b00;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {ReadonlyMat4} a the source matrix\n * @returns {Number} determinant of a\n */\nexport function determinant(a) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  let a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  let a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  let a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  let b0 = a00 * a11 - a01 * a10;\n  let b1 = a00 * a12 - a02 * a10;\n  let b2 = a01 * a12 - a02 * a11;\n  let b3 = a20 * a31 - a21 * a30;\n  let b4 = a20 * a32 - a22 * a30;\n  let b5 = a21 * a32 - a22 * a31;\n  let b6 = a00 * b5 - a01 * b4 + a02 * b3;\n  let b7 = a10 * b5 - a11 * b4 + a12 * b3;\n  let b8 = a20 * b2 - a21 * b1 + a22 * b0;\n  let b9 = a30 * b2 - a31 * b1 + a32 * b0;\n\n  // Calculate the determinant\n  return a13 * b6 - a03 * b7 + a33 * b8 - a23 * b9;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function multiply(out, a, b) {\n  let a00 = a[0],\n    a01 = a[1],\n    a02 = a[2],\n    a03 = a[3];\n  let a10 = a[4],\n    a11 = a[5],\n    a12 = a[6],\n    a13 = a[7];\n  let a20 = a[8],\n    a21 = a[9],\n    a22 = a[10],\n    a23 = a[11];\n  let a30 = a[12],\n    a31 = a[13],\n    a32 = a[14],\n    a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[4];\n  b1 = b[5];\n  b2 = b[6];\n  b3 = b[7];\n  out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[8];\n  b1 = b[9];\n  b2 = b[10];\n  b3 = b[11];\n  out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n\n  b0 = b[12];\n  b1 = b[13];\n  b2 = b[14];\n  b3 = b[15];\n  out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;\n  out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;\n  out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;\n  out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to translate\n * @param {ReadonlyVec3} v vector to translate by\n * @returns {mat4} out\n */\nexport function translate(out, a, v) {\n  let x = v[0],\n    y = v[1],\n    z = v[2];\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0];\n    a01 = a[1];\n    a02 = a[2];\n    a03 = a[3];\n    a10 = a[4];\n    a11 = a[5];\n    a12 = a[6];\n    a13 = a[7];\n    a20 = a[8];\n    a21 = a[9];\n    a22 = a[10];\n    a23 = a[11];\n\n    out[0] = a00;\n    out[1] = a01;\n    out[2] = a02;\n    out[3] = a03;\n    out[4] = a10;\n    out[5] = a11;\n    out[6] = a12;\n    out[7] = a13;\n    out[8] = a20;\n    out[9] = a21;\n    out[10] = a22;\n    out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {ReadonlyVec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nexport function scale(out, a, v) {\n  let x = v[0],\n    y = v[1],\n    z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function rotate(out, a, rad, axis) {\n  let x = axis[0],\n    y = axis[1],\n    z = axis[2];\n  let len = Math.hypot(x, y, z);\n  let s, c, t;\n  let a00, a01, a02, a03;\n  let a10, a11, a12, a13;\n  let a20, a21, a22, a23;\n  let b00, b01, b02;\n  let b10, b11, b12;\n  let b20, b21, b22;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0];\n  a01 = a[1];\n  a02 = a[2];\n  a03 = a[3];\n  a10 = a[4];\n  a11 = a[5];\n  a12 = a[6];\n  a13 = a[7];\n  a20 = a[8];\n  a21 = a[9];\n  a22 = a[10];\n  a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c;\n  b01 = y * x * t + z * s;\n  b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s;\n  b11 = y * y * t + c;\n  b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s;\n  b21 = y * z * t - x * s;\n  b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateX(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[0] = a[0];\n    out[1] = a[1];\n    out[2] = a[2];\n    out[3] = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateY(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a20 = a[8];\n  let a21 = a[9];\n  let a22 = a[10];\n  let a23 = a[11];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged rows\n    out[4] = a[4];\n    out[5] = a[5];\n    out[6] = a[6];\n    out[7] = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function rotateZ(out, a, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n  let a00 = a[0];\n  let a01 = a[1];\n  let a02 = a[2];\n  let a03 = a[3];\n  let a10 = a[4];\n  let a11 = a[5];\n  let a12 = a[6];\n  let a13 = a[7];\n\n  if (a !== out) {\n    // If the source and destination differ, copy the unchanged last row\n    out[8] = a[8];\n    out[9] = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyVec3} v Scaling vector\n * @returns {mat4} out\n */\nexport function fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {ReadonlyVec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nexport function fromRotation(out, rad, axis) {\n  let x = axis[0],\n    y = axis[1],\n    z = axis[2];\n  let len = Math.hypot(x, y, z);\n  let s, c, t;\n\n  if (len < glMatrix.EPSILON) {\n    return null;\n  }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromXRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromYRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = 0;\n  out[2] = -s;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nexport function fromZRotation(out, rad) {\n  let s = Math.sin(rad);\n  let c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  let x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a new mat4 from a dual quat.\n *\n * @param {mat4} out Matrix\n * @param {ReadonlyQuat2} a Dual Quaternion\n * @returns {mat4} mat4 receiving operation result\n */\nexport function fromQuat2(out, a) {\n  let translation = new glMatrix.ARRAY_TYPE(3);\n  let bx = -a[0],\n    by = -a[1],\n    bz = -a[2],\n    bw = a[3],\n    ax = a[4],\n    ay = a[5],\n    az = a[6],\n    aw = a[7];\n\n  let magnitude = bx * bx + by * by + bz * bz + bw * bw;\n  //Only scale if it makes sense\n  if (magnitude > 0) {\n    translation[0] = ((ax * bw + aw * bx + ay * bz - az * by) * 2) / magnitude;\n    translation[1] = ((ay * bw + aw * by + az * bx - ax * bz) * 2) / magnitude;\n    translation[2] = ((az * bw + aw * bz + ax * by - ay * bx) * 2) / magnitude;\n  } else {\n    translation[0] = (ax * bw + aw * bx + ay * bz - az * by) * 2;\n    translation[1] = (ay * bw + aw * by + az * bx - ax * bz) * 2;\n    translation[2] = (az * bw + aw * bz + ax * by - ay * bx) * 2;\n  }\n  fromRotationTranslation(out, a, translation);\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nexport function getScaling(out, mat) {\n  let m11 = mat[0];\n  let m12 = mat[1];\n  let m13 = mat[2];\n  let m21 = mat[4];\n  let m22 = mat[5];\n  let m23 = mat[6];\n  let m31 = mat[8];\n  let m32 = mat[9];\n  let m33 = mat[10];\n\n  out[0] = Math.hypot(m11, m12, m13);\n  out[1] = Math.hypot(m21, m22, m23);\n  out[2] = Math.hypot(m31, m32, m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {ReadonlyMat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nexport function getRotation(out, mat) {\n  let scaling = new glMatrix.ARRAY_TYPE(3);\n  getScaling(scaling, mat);\n\n  let is1 = 1 / scaling[0];\n  let is2 = 1 / scaling[1];\n  let is3 = 1 / scaling[2];\n\n  let sm11 = mat[0] * is1;\n  let sm12 = mat[1] * is2;\n  let sm13 = mat[2] * is3;\n  let sm21 = mat[4] * is1;\n  let sm22 = mat[5] * is2;\n  let sm23 = mat[6] * is3;\n  let sm31 = mat[8] * is1;\n  let sm32 = mat[9] * is2;\n  let sm33 = mat[10] * is3;\n\n  let trace = sm11 + sm22 + sm33;\n  let S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (sm23 - sm32) / S;\n    out[1] = (sm31 - sm13) / S;\n    out[2] = (sm12 - sm21) / S;\n  } else if (sm11 > sm22 && sm11 > sm33) {\n    S = Math.sqrt(1.0 + sm11 - sm22 - sm33) * 2;\n    out[3] = (sm23 - sm32) / S;\n    out[0] = 0.25 * S;\n    out[1] = (sm12 + sm21) / S;\n    out[2] = (sm31 + sm13) / S;\n  } else if (sm22 > sm33) {\n    S = Math.sqrt(1.0 + sm22 - sm11 - sm33) * 2;\n    out[3] = (sm31 - sm13) / S;\n    out[0] = (sm12 + sm21) / S;\n    out[1] = 0.25 * S;\n    out[2] = (sm23 + sm32) / S;\n  } else {\n    S = Math.sqrt(1.0 + sm33 - sm11 - sm22) * 2;\n    out[3] = (sm12 - sm21) / S;\n    out[0] = (sm31 + sm13) / S;\n    out[1] = (sm23 + sm32) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  let x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {ReadonlyVec3} v Translation vector\n * @param {ReadonlyVec3} s Scaling vector\n * @param {ReadonlyVec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nexport function fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  let x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let xy = x * y2;\n  let xz = x * z2;\n  let yy = y * y2;\n  let yz = y * z2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  let sx = s[0];\n  let sy = s[1];\n  let sz = s[2];\n\n  let ox = o[0];\n  let oy = o[1];\n  let oz = o[2];\n\n  let out0 = (1 - (yy + zz)) * sx;\n  let out1 = (xy + wz) * sx;\n  let out2 = (xz - wy) * sx;\n  let out4 = (xy - wz) * sy;\n  let out5 = (1 - (xx + zz)) * sy;\n  let out6 = (yz + wx) * sy;\n  let out8 = (xz + wy) * sz;\n  let out9 = (yz - wx) * sz;\n  let out10 = (1 - (xx + yy)) * sz;\n\n  out[0] = out0;\n  out[1] = out1;\n  out[2] = out2;\n  out[3] = 0;\n  out[4] = out4;\n  out[5] = out5;\n  out[6] = out6;\n  out[7] = 0;\n  out[8] = out8;\n  out[9] = out9;\n  out[10] = out10;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out0 * ox + out4 * oy + out8 * oz);\n  out[13] = v[1] + oy - (out1 * ox + out5 * oy + out9 * oz);\n  out[14] = v[2] + oz - (out2 * ox + out6 * oy + out10 * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {ReadonlyQuat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nexport function fromQuat(out, q) {\n  let x = q[0],\n    y = q[1],\n    z = q[2],\n    w = q[3];\n  let x2 = x + x;\n  let y2 = y + y;\n  let z2 = z + z;\n\n  let xx = x * x2;\n  let yx = y * x2;\n  let yy = y * y2;\n  let zx = z * x2;\n  let zy = z * y2;\n  let zz = z * z2;\n  let wx = w * x2;\n  let wy = w * y2;\n  let wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function frustum(out, left, right, bottom, top, near, far) {\n  let rl = 1 / (right - left);\n  let tb = 1 / (top - bottom);\n  let nf = 1 / (near - far);\n  out[0] = near * 2 * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = near * 2 * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = far * near * 2 * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds.\n * Passing null/undefined/no value for far will generate infinite projection matrix.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum, can be null or Infinity\n * @returns {mat4} out\n */\nexport function perspective(out, fovy, aspect, near, far) {\n  let f = 1.0 / Math.tan(fovy / 2),\n    nf;\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[15] = 0;\n  if (far != null && far !== Infinity) {\n    nf = 1 / (near - far);\n    out[10] = (far + near) * nf;\n    out[14] = 2 * far * near * nf;\n  } else {\n    out[10] = -1;\n    out[14] = -2 * near;\n  }\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function perspectiveFromFieldOfView(out, fov, near, far) {\n  let upTan = Math.tan((fov.upDegrees * Math.PI) / 180.0);\n  let downTan = Math.tan((fov.downDegrees * Math.PI) / 180.0);\n  let leftTan = Math.tan((fov.leftDegrees * Math.PI) / 180.0);\n  let rightTan = Math.tan((fov.rightDegrees * Math.PI) / 180.0);\n  let xScale = 2.0 / (leftTan + rightTan);\n  let yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = (upTan - downTan) * yScale * 0.5;\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nexport function ortho(out, left, right, bottom, top, near, far) {\n  let lr = 1 / (left - right);\n  let bt = 1 / (bottom - top);\n  let nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis.\n * If you want a matrix that actually makes an object look at another object, you should use targetTo instead.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function lookAt(out, eye, center, up) {\n  let x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  let eyex = eye[0];\n  let eyey = eye[1];\n  let eyez = eye[2];\n  let upx = up[0];\n  let upy = up[1];\n  let upz = up[2];\n  let centerx = center[0];\n  let centery = center[1];\n  let centerz = center[2];\n\n  if (\n    Math.abs(eyex - centerx) < glMatrix.EPSILON &&\n    Math.abs(eyey - centery) < glMatrix.EPSILON &&\n    Math.abs(eyez - centerz) < glMatrix.EPSILON\n  ) {\n    return identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.hypot(z0, z1, z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.hypot(x0, x1, x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.hypot(y0, y1, y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {ReadonlyVec3} eye Position of the viewer\n * @param {ReadonlyVec3} center Point the viewer is looking at\n * @param {ReadonlyVec3} up vec3 pointing up\n * @returns {mat4} out\n */\nexport function targetTo(out, eye, target, up) {\n  let eyex = eye[0],\n    eyey = eye[1],\n    eyez = eye[2],\n    upx = up[0],\n    upy = up[1],\n    upz = up[2];\n\n  let z0 = eyex - target[0],\n    z1 = eyey - target[1],\n    z2 = eyez - target[2];\n\n  let len = z0 * z0 + z1 * z1 + z2 * z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  let x0 = upy * z2 - upz * z1,\n    x1 = upz * z0 - upx * z2,\n    x2 = upx * z1 - upy * z0;\n\n  len = x0 * x0 + x1 * x1 + x2 * x2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {ReadonlyMat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nexport function str(a) {\n  return (\n    \"mat4(\" +\n    a[0] +\n    \", \" +\n    a[1] +\n    \", \" +\n    a[2] +\n    \", \" +\n    a[3] +\n    \", \" +\n    a[4] +\n    \", \" +\n    a[5] +\n    \", \" +\n    a[6] +\n    \", \" +\n    a[7] +\n    \", \" +\n    a[8] +\n    \", \" +\n    a[9] +\n    \", \" +\n    a[10] +\n    \", \" +\n    a[11] +\n    \", \" +\n    a[12] +\n    \", \" +\n    a[13] +\n    \", \" +\n    a[14] +\n    \", \" +\n    a[15] +\n    \")\"\n  );\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {ReadonlyMat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nexport function frob(a) {\n  return Math.hypot(\n    a[0],\n    a[1],\n    a[2],\n    a[3],\n    a[4],\n    a[5],\n    a[6],\n    a[7],\n    a[8],\n    a[9],\n    a[10],\n    a[11],\n    a[12],\n    a[13],\n    a[14],\n    a[15]\n  );\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @returns {mat4} out\n */\nexport function subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {ReadonlyMat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nexport function multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {ReadonlyMat4} a the first operand\n * @param {ReadonlyMat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nexport function multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + b[0] * scale;\n  out[1] = a[1] + b[1] * scale;\n  out[2] = a[2] + b[2] * scale;\n  out[3] = a[3] + b[3] * scale;\n  out[4] = a[4] + b[4] * scale;\n  out[5] = a[5] + b[5] * scale;\n  out[6] = a[6] + b[6] * scale;\n  out[7] = a[7] + b[7] * scale;\n  out[8] = a[8] + b[8] * scale;\n  out[9] = a[9] + b[9] * scale;\n  out[10] = a[10] + b[10] * scale;\n  out[11] = a[11] + b[11] * scale;\n  out[12] = a[12] + b[12] * scale;\n  out[13] = a[13] + b[13] * scale;\n  out[14] = a[14] + b[14] * scale;\n  out[15] = a[15] + b[15] * scale;\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function exactEquals(a, b) {\n  return (\n    a[0] === b[0] &&\n    a[1] === b[1] &&\n    a[2] === b[2] &&\n    a[3] === b[3] &&\n    a[4] === b[4] &&\n    a[5] === b[5] &&\n    a[6] === b[6] &&\n    a[7] === b[7] &&\n    a[8] === b[8] &&\n    a[9] === b[9] &&\n    a[10] === b[10] &&\n    a[11] === b[11] &&\n    a[12] === b[12] &&\n    a[13] === b[13] &&\n    a[14] === b[14] &&\n    a[15] === b[15]\n  );\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {ReadonlyMat4} a The first matrix.\n * @param {ReadonlyMat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nexport function equals(a, b) {\n  let a0 = a[0],\n    a1 = a[1],\n    a2 = a[2],\n    a3 = a[3];\n  let a4 = a[4],\n    a5 = a[5],\n    a6 = a[6],\n    a7 = a[7];\n  let a8 = a[8],\n    a9 = a[9],\n    a10 = a[10],\n    a11 = a[11];\n  let a12 = a[12],\n    a13 = a[13],\n    a14 = a[14],\n    a15 = a[15];\n\n  let b0 = b[0],\n    b1 = b[1],\n    b2 = b[2],\n    b3 = b[3];\n  let b4 = b[4],\n    b5 = b[5],\n    b6 = b[6],\n    b7 = b[7];\n  let b8 = b[8],\n    b9 = b[9],\n    b10 = b[10],\n    b11 = b[11];\n  let b12 = b[12],\n    b13 = b[13],\n    b14 = b[14],\n    b15 = b[15];\n\n  return (\n    Math.abs(a0 - b0) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n    Math.abs(a1 - b1) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n    Math.abs(a2 - b2) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n    Math.abs(a3 - b3) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n    Math.abs(a4 - b4) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n    Math.abs(a5 - b5) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n    Math.abs(a6 - b6) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n    Math.abs(a7 - b7) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n    Math.abs(a8 - b8) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n    Math.abs(a9 - b9) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n    Math.abs(a10 - b10) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n    Math.abs(a11 - b11) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n    Math.abs(a12 - b12) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n    Math.abs(a13 - b13) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n    Math.abs(a14 - b14) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n    Math.abs(a15 - b15) <=\n      glMatrix.EPSILON * Math.max(1.0, Math.abs(a15), Math.abs(b15))\n  );\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nexport const mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nexport const sub = subtract;\n","import * as mat4 from '../gl-matrix/mat4'\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Tutorial/Adding_2D_content_to_a_WebGL_context\nexport default function(gl, programInfo) {\n\n    const buffers = initBuffers(gl)\n\n    gl.clearColor(0.0, 0.0, 0.0, 1.0) // Clear to black, fully opaque\n    gl.clearDepth(1.0) // Clear everything\n    gl.enable(gl.DEPTH_TEST) // Enable depth testing\n    gl.depthFunc(gl.LEQUAL) // Near things obscure far things\n\n    // Clear the canvas before we start drawing on it.\n\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT)\n\n    // Create a perspective matrix, a special matrix that is\n    // used to simulate the distortion of perspective in a camera.\n    // Our field of view is 45 degrees, with a width/height\n    // ratio that matches the display size of the canvas\n    // and we only want to see objects between 0.1 units\n    // and 100 units away from the camera.\n\n    const fieldOfView = (45 * Math.PI) / 180 // in radians\n    const aspect = gl.canvas.clientWidth / gl.canvas.clientHeight\n    const zNear = 0.1\n    const zFar = 100.0\n    const projectionMatrix = mat4.create()\n\n    // note: glmatrix.js always has the first argument\n    // as the destination to receive the result.\n    mat4.perspective(projectionMatrix, fieldOfView, aspect, zNear, zFar)\n\n    // Set the drawing position to the \"identity\" point, which is\n    // the center of the scene.\n    const modelViewMatrix = mat4.create()\n\n    // Now move the drawing position a bit to where we want to\n    // start drawing the square.\n\n    mat4.translate(\n        modelViewMatrix, // destination matrix\n        modelViewMatrix, // matrix to translate\n        [-0.0, 0.0, -6.0]\n    ) // amount to translate\n\n    // Tell WebGL how to pull out the positions from the position\n    // buffer into the vertexPosition attribute.\n    {\n        const numComponents = 2 // pull out 2 values per iteration\n        const type = gl.FLOAT // the data in the buffer is 32bit floats\n        const normalize = false // don't normalize\n        const stride = 0 // how many bytes to get from one set of values to the next\n        // 0 = use type and numComponents above\n        const offset = 0 // how many bytes inside the buffer to start from\n        gl.bindBuffer(gl.ARRAY_BUFFER, buffers.position)\n        gl.vertexAttribPointer(\n            programInfo.attribLocations.vertexPosition,\n            numComponents,\n            type,\n            normalize,\n            stride,\n            offset\n        )\n        gl.enableVertexAttribArray(programInfo.attribLocations.vertexPosition)\n    }\n\n    // Tell WebGL to use our program when drawing\n\n    gl.useProgram(programInfo.program)\n\n    // Set the shader uniforms\n\n    gl.uniformMatrix4fv(\n        programInfo.uniformLocations.projectionMatrix,\n        false,\n        projectionMatrix\n    )\n    gl.uniformMatrix4fv(\n        programInfo.uniformLocations.modelViewMatrix,\n        false,\n        modelViewMatrix\n    )\n\n    {\n        const offset = 0\n        const vertexCount = 4\n        gl.drawArrays(gl.TRIANGLE_STRIP, offset, vertexCount)\n    }\n}\n\nfunction initBuffers(gl) {\n    // Create a buffer for the square's positions.\n\n    const positionBuffer = gl.createBuffer()\n\n    // Select the positionBuffer as the one to apply buffer\n    // operations to from here out.\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer)\n\n    // Now create an array of positions for the square.\n\n    const positions = [\n        -100.0,\n        100.0,\n        100.0,\n        100.0,\n        -100.0,\n        -100.0,\n        100.0,\n        -100.0\n    ]\n\n    // Now pass the list of positions into WebGL to build the\n    // shape. We do this by creating a Float32Array from the\n    // JavaScript array, then use it to fill the current buffer.\n\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW)\n\n    return {\n        position: positionBuffer\n    }\n}\n","<template>\n    <div class=\"fragment-shader\">\n        <!-- the shader will go here -->\n        <slot />\n        <!-- and the result will be drawn here -->\n        <full-canvas\n            class=\"canvas\"\n            ref=\"canvas\"\n            @canvas-ready=\"initializeCanvas\"\n        />\n    </div>\n</template>\n\n<script>\nimport snoise from './libs/snoise'\nimport rotate2d from './libs/rotate2d'\nimport get from 'lodash/get'\nimport FullCanvas from '@fuzzco/full-canvas'\nimport init from './gl/init'\nimport {\n    vertex as defaultVertex,\n    fragment as defaultFragment\n} from './libs/defaultShaders'\nimport buildShaders from './gl/buildShaders'\nimport buildPlane from './gl/buildPlane'\n\nexport default {\n    components: { 'full-canvas': FullCanvas },\n    props: {\n        uniforms: {\n            type: Object,\n            default: () => {}\n        }\n    },\n    data() {\n        return {\n            gl: null,\n            shaderProgram: {},\n            canvas: null,\n            builtUniforms: {},\n            lastTime: Date.now(),\n            time: 0\n        }\n    },\n    methods: {\n        initializeCanvas(canvas) {\n            this.canvas = canvas\n\n            // we will:\n            // 1. initialize the canvas webgl context\n            // 2. build our shaders\n            // 3. render a plane where the fragment shader can live\n\n            // initialize the canvas, saving the gl context\n            const { gl } = init(canvas)\n            this.gl = gl\n\n            // fetch user-defined fragment shader\n            const fragmentVNode = get(this.$slots, 'default', []).find(\n                h => get(h, 'data.attrs.type', '') === 'shader/fragment'\n            )\n            let fragment = get(fragmentVNode, 'elm.innerHTML', null)\n\n            // include external functions\n            fragment = fragment.replace('#include <snoise>', snoise)\n            fragment = fragment.replace('#include <rotate2d>', rotate2d)\n\n            // fetch user-defined vertex shader\n            const vertexVNode = get(this.$slots, 'default', []).find(\n                h => get(h, 'data.attrs.type', '') === 'shader/vertex'\n            )\n            let vertex = get(vertexVNode, 'elm.innerHTML', null)\n\n            // build the desired shaders\n            this.shaderProgram = buildShaders(\n                this.gl,\n                vertex || defaultVertex,\n                fragment || defaultFragment\n            )\n\n            // kick render loop\n            this.render()\n        },\n        render() {\n            this.time += Date.now() - this.lastTime\n            this.lastTime = Date.now()\n\n            // build uniforms\n            const toBuild = {\n                uTime: {\n                    type: 'float',\n                    value: this.time\n                },\n                uResolution: {\n                    type: 'vec2',\n                    value: [this.canvas.width, this.canvas.height]\n                },\n                ...this.uniforms\n            }\n\n            Object.keys(toBuild).map(key => {\n                const uni = toBuild[key]\n                const uniformValueSetFunction =\n                    this.uniformMap[uni.type] ||\n                    this.gl[`uniform${uni.type}`] ||\n                    this.gl[uni.type]\n\n                if (!uniformValueSetFunction) {\n                    console.warn(`No uniform method for type ${uni.type}`)\n                    return\n                }\n\n                uniformValueSetFunction(\n                    this.gl.getUniformLocation(this.shaderProgram, key),\n                    uni.value\n                )\n            })\n\n            buildPlane(this.gl, this.programInfo)\n\n            requestAnimationFrame(this.render)\n        }\n    },\n    computed: {\n        uniformMap() {\n            // from phenomenon - https://github.com/vaneenige/phenomenon/blob/master/src/index.ts\n            return {\n                float: (loc, val) => this.gl.uniform1f(loc, val),\n                vec2: (loc, val) => this.gl.uniform2fv(loc, val),\n                vec3: (loc, val) => this.gl.uniform3fv(loc, val),\n                vec4: (loc, val) => this.gl.uniform4fv(loc, val),\n                mat2: (loc, val) => this.gl.uniformMatrix2fv(loc, false, val),\n                mat3: (loc, val) => this.gl.uniformMatrix3fv(loc, false, val),\n                mat4: (loc, val) => this.gl.uniformMatrix4fv(loc, false, val)\n            }\n        },\n        programInfo() {\n            return {\n                program: this.shaderProgram,\n                attribLocations: {\n                    vertexPosition: this.gl.getAttribLocation(\n                        this.shaderProgram,\n                        'aVertexPosition'\n                    )\n                },\n                uniformLocations: {\n                    projectionMatrix: this.gl.getUniformLocation(\n                        this.shaderProgram,\n                        'uProjectionMatrix'\n                    ),\n                    modelViewMatrix: this.gl.getUniformLocation(\n                        this.shaderProgram,\n                        'uModelViewMatrix'\n                    )\n                }\n            }\n        }\n    }\n}\n</script>\n\n<style>\n.fragment-shader,\n.fragment-shader .canvas {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FragmentShader.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./FragmentShader.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./FragmentShader.vue?vue&type=template&id=9b897186&\"\nimport script from \"./FragmentShader.vue?vue&type=script&lang=js&\"\nexport * from \"./FragmentShader.vue?vue&type=script&lang=js&\"\nimport style0 from \"./FragmentShader.vue?vue&type=style&index=0&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n    <main class=\"class\">\n        <div class=\"single-shader\">\n            <fragment-shader>\n                <script type=\"shader/fragment\">\n                    precision highp float;\n                    uniform vec2 uResolution;\n\n                    void main() {\n                        vec2 uv = gl_FragCoord.xy / uResolution.xy;\n                        gl_FragColor = vec4(uv.x, 0.2, 0.2, 1.);\n                    }\n                </script>\n            </fragment-shader>\n        </div>\n\n        <div class=\"single-shader\">\n            <fragment-shader>\n                <script type=\"shader/fragment\">\n                    precision highp float;\n                    uniform vec2 uResolution;\n                    uniform float uTime;\n\n                    #include <snoise>\n\n                    void main() {\n                        vec2 uv = gl_FragCoord.xy / uResolution.xy;\n                        uv.x *= uResolution.x / uResolution.y;\n                        vec4 color = vec4(vec3(1. - abs(snoise(uv + uTime * 0.0002))), 1.);\n                        gl_FragColor = color;\n                    }\n                </script>\n            </fragment-shader>\n        </div>\n\n        <div class=\"single-shader\">\n            <fragment-shader>\n                <script type=\"shader/fragment\">\n                    precision highp float;\n                    uniform vec2 uResolution;\n                    uniform float uTime;\n\n                    #include <snoise>\n                    #include <rotate2d>\n\n                    void main() {\n                        vec2 uv = gl_FragCoord.xy / uResolution.xy;\n                        uv -= vec2(0.5);\n                        uv *= rotate2d(uTime * 0.00025);\n                        uv += vec2(0.5);\n\n                        vec4 color = vec4(vec3(1. - abs(snoise(uv))), 1.);\n                        gl_FragColor = color;\n                    }\n                </script>\n            </fragment-shader>\n        </div>\n    </main>\n</template>\n\n<script>\nimport FragmentShader from '../src/FragmentShader'\n\nexport default {\n    components: {\n        'fragment-shader': FragmentShader\n    }\n}\n</script>\n\n<style lang=\"scss\">\n.class {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100vw;\n    height: 100vh;\n\n    .single-shader {\n        width: 300px;\n        height: 300px;\n        position: relative;\n        margin: 20px auto;\n    }\n}\n</style>\n","import mod from \"-!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./App.vue?vue&type=template&id=260aabbc&\"\nimport script from \"./App.vue?vue&type=script&lang=js&\"\nexport * from \"./App.vue?vue&type=script&lang=js&\"\nimport style0 from \"./App.vue?vue&type=style&index=0&lang=scss&\"\n\n\n/* normalize component */\nimport normalizer from \"!../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","import Vue from 'vue'\nimport App from './App.vue'\n\nVue.config.productionTip = false\n\nnew Vue({\n    render: h => h(App)\n}).$mount('#app')\n","exports = module.exports = require(\"../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".class{position:absolute;top:0;left:0;width:100vw;height:100vh}.class .single-shader{width:300px;height:300px;position:relative;margin:20px auto}\", \"\"]);\n\n// exports\n","import mod from \"-!../node_modules/vue-style-loader/index.js??ref--8-oneOf-1-0!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\"; export default mod; export * from \"-!../node_modules/vue-style-loader/index.js??ref--8-oneOf-1-0!../node_modules/css-loader/index.js??ref--8-oneOf-1-1!../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../node_modules/postcss-loader/src/index.js??ref--8-oneOf-1-2!../node_modules/sass-loader/lib/loader.js??ref--8-oneOf-1-3!../node_modules/cache-loader/dist/cjs.js??ref--0-0!../node_modules/vue-loader/lib/index.js??vue-loader-options!./App.vue?vue&type=style&index=0&lang=scss&\""],"sourceRoot":""}